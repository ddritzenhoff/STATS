// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package gen

import (
	"context"
)

const createMember = `-- name: CreateMember :one
INSERT INTO members (
    slack_uid,
    month,
    year
) VALUES (
    ?, ?, ?
)
RETURNING id, slack_uid, received_likes, received_dislikes, received_reactions, given_likes, given_dislikes, given_reactions, month, year, created_at, updated_at
`

type CreateMemberParams struct {
	SlackUid string
	Month    int64
	Year     int64
}

func (q *Queries) CreateMember(ctx context.Context, arg CreateMemberParams) (Member, error) {
	row := q.db.QueryRowContext(ctx, createMember, arg.SlackUid, arg.Month, arg.Year)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.SlackUid,
		&i.ReceivedLikes,
		&i.ReceivedDislikes,
		&i.ReceivedReactions,
		&i.GivenLikes,
		&i.GivenDislikes,
		&i.GivenReactions,
		&i.Month,
		&i.Year,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMember = `-- name: DeleteMember :exec
DELETE FROM members
WHERE id = ?
`

func (q *Queries) DeleteMember(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMember, id)
	return err
}

const findMember = `-- name: FindMember :one
SELECT id, slack_uid, received_likes, received_dislikes, received_reactions, given_likes, given_dislikes, given_reactions, month, year, created_at, updated_at FROM members
WHERE slack_uid = ? AND month = ? AND year = ? LIMIT 1
`

type FindMemberParams struct {
	SlackUid string
	Month    int64
	Year     int64
}

func (q *Queries) FindMember(ctx context.Context, arg FindMemberParams) (Member, error) {
	row := q.db.QueryRowContext(ctx, findMember, arg.SlackUid, arg.Month, arg.Year)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.SlackUid,
		&i.ReceivedLikes,
		&i.ReceivedDislikes,
		&i.ReceivedReactions,
		&i.GivenLikes,
		&i.GivenDislikes,
		&i.GivenReactions,
		&i.Month,
		&i.Year,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findMemberByID = `-- name: FindMemberByID :one
SELECT id, slack_uid, received_likes, received_dislikes, received_reactions, given_likes, given_dislikes, given_reactions, month, year, created_at, updated_at FROM members
WHERE id = ? LIMIT 1
`

func (q *Queries) FindMemberByID(ctx context.Context, id int64) (Member, error) {
	row := q.db.QueryRowContext(ctx, findMemberByID, id)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.SlackUid,
		&i.ReceivedLikes,
		&i.ReceivedDislikes,
		&i.ReceivedReactions,
		&i.GivenLikes,
		&i.GivenDislikes,
		&i.GivenReactions,
		&i.Month,
		&i.Year,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const mostDislikesGiven = `-- name: MostDislikesGiven :many
SELECT m.id, m.slack_uid, m.received_likes, m.received_dislikes, m.received_reactions, m.given_likes, m.given_dislikes, m.given_reactions, m.month, m.year, m.created_at, m.updated_at
FROM members m
WHERE m.month = ?
  AND m.year = ?
  AND m.given_dislikes = (
      SELECT MAX(m2.given_dislikes)
      FROM members m2
      WHERE m2.month = ?
        AND m2.year = ?
  )
`

type MostDislikesGivenParams struct {
	Month   int64
	Year    int64
	Month_2 int64
	Year_2  int64
}

func (q *Queries) MostDislikesGiven(ctx context.Context, arg MostDislikesGivenParams) ([]Member, error) {
	rows, err := q.db.QueryContext(ctx, mostDislikesGiven,
		arg.Month,
		arg.Year,
		arg.Month_2,
		arg.Year_2,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Member
	for rows.Next() {
		var i Member
		if err := rows.Scan(
			&i.ID,
			&i.SlackUid,
			&i.ReceivedLikes,
			&i.ReceivedDislikes,
			&i.ReceivedReactions,
			&i.GivenLikes,
			&i.GivenDislikes,
			&i.GivenReactions,
			&i.Month,
			&i.Year,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const mostDislikesReceived = `-- name: MostDislikesReceived :many
SELECT m.id, m.slack_uid, m.received_likes, m.received_dislikes, m.received_reactions, m.given_likes, m.given_dislikes, m.given_reactions, m.month, m.year, m.created_at, m.updated_at
FROM members m
WHERE m.month = ?
  AND m.year = ?
  AND m.received_dislikes = (
      SELECT MAX(m2.received_dislikes)
      FROM members m2
      WHERE m2.month = ?
        AND m2.year = ?
  )
`

type MostDislikesReceivedParams struct {
	Month   int64
	Year    int64
	Month_2 int64
	Year_2  int64
}

func (q *Queries) MostDislikesReceived(ctx context.Context, arg MostDislikesReceivedParams) ([]Member, error) {
	rows, err := q.db.QueryContext(ctx, mostDislikesReceived,
		arg.Month,
		arg.Year,
		arg.Month_2,
		arg.Year_2,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Member
	for rows.Next() {
		var i Member
		if err := rows.Scan(
			&i.ID,
			&i.SlackUid,
			&i.ReceivedLikes,
			&i.ReceivedDislikes,
			&i.ReceivedReactions,
			&i.GivenLikes,
			&i.GivenDislikes,
			&i.GivenReactions,
			&i.Month,
			&i.Year,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const mostLikesGiven = `-- name: MostLikesGiven :many
SELECT m.id, m.slack_uid, m.received_likes, m.received_dislikes, m.received_reactions, m.given_likes, m.given_dislikes, m.given_reactions, m.month, m.year, m.created_at, m.updated_at
FROM members m
WHERE m.month = ?
  AND m.year = ?
  AND m.given_likes = (
      SELECT MAX(m2.given_likes)
      FROM members m2
      WHERE m2.month = ?
        AND m2.year = ?
  )
`

type MostLikesGivenParams struct {
	Month   int64
	Year    int64
	Month_2 int64
	Year_2  int64
}

func (q *Queries) MostLikesGiven(ctx context.Context, arg MostLikesGivenParams) ([]Member, error) {
	rows, err := q.db.QueryContext(ctx, mostLikesGiven,
		arg.Month,
		arg.Year,
		arg.Month_2,
		arg.Year_2,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Member
	for rows.Next() {
		var i Member
		if err := rows.Scan(
			&i.ID,
			&i.SlackUid,
			&i.ReceivedLikes,
			&i.ReceivedDislikes,
			&i.ReceivedReactions,
			&i.GivenLikes,
			&i.GivenDislikes,
			&i.GivenReactions,
			&i.Month,
			&i.Year,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const mostLikesReceived = `-- name: MostLikesReceived :many
SELECT m.id, m.slack_uid, m.received_likes, m.received_dislikes, m.received_reactions, m.given_likes, m.given_dislikes, m.given_reactions, m.month, m.year, m.created_at, m.updated_at 
FROM members m
WHERE m.month = ? 
  AND m.year = ? 
  AND m.received_likes = (
      SELECT MAX(m2.received_likes) 
      FROM members m2
      WHERE m2.month = ? 
        AND m2.year = ?
  )
`

type MostLikesReceivedParams struct {
	Month   int64
	Year    int64
	Month_2 int64
	Year_2  int64
}

func (q *Queries) MostLikesReceived(ctx context.Context, arg MostLikesReceivedParams) ([]Member, error) {
	rows, err := q.db.QueryContext(ctx, mostLikesReceived,
		arg.Month,
		arg.Year,
		arg.Month_2,
		arg.Year_2,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Member
	for rows.Next() {
		var i Member
		if err := rows.Scan(
			&i.ID,
			&i.SlackUid,
			&i.ReceivedLikes,
			&i.ReceivedDislikes,
			&i.ReceivedReactions,
			&i.GivenLikes,
			&i.GivenDislikes,
			&i.GivenReactions,
			&i.Month,
			&i.Year,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const mostReactionsGiven = `-- name: MostReactionsGiven :many
SELECT m.id, m.slack_uid, m.received_likes, m.received_dislikes, m.received_reactions, m.given_likes, m.given_dislikes, m.given_reactions, m.month, m.year, m.created_at, m.updated_at
FROM members m
WHERE m.month = ?
  AND m.year = ?
  AND m.given_reactions = (
      SELECT MAX(m2.given_reactions)
      FROM members m2
      WHERE m2.month = ?
        AND m2.year = ?
  )
`

type MostReactionsGivenParams struct {
	Month   int64
	Year    int64
	Month_2 int64
	Year_2  int64
}

func (q *Queries) MostReactionsGiven(ctx context.Context, arg MostReactionsGivenParams) ([]Member, error) {
	rows, err := q.db.QueryContext(ctx, mostReactionsGiven,
		arg.Month,
		arg.Year,
		arg.Month_2,
		arg.Year_2,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Member
	for rows.Next() {
		var i Member
		if err := rows.Scan(
			&i.ID,
			&i.SlackUid,
			&i.ReceivedLikes,
			&i.ReceivedDislikes,
			&i.ReceivedReactions,
			&i.GivenLikes,
			&i.GivenDislikes,
			&i.GivenReactions,
			&i.Month,
			&i.Year,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const mostReactionsReceived = `-- name: MostReactionsReceived :many
SELECT m.id, m.slack_uid, m.received_likes, m.received_dislikes, m.received_reactions, m.given_likes, m.given_dislikes, m.given_reactions, m.month, m.year, m.created_at, m.updated_at
FROM members m
WHERE m.month = ?
  AND m.year = ?
  AND m.received_reactions = (
      SELECT MAX(m2.received_reactions)
      FROM members m2
      WHERE m2.month = ?
        AND m2.year = ?
  )
`

type MostReactionsReceivedParams struct {
	Month   int64
	Year    int64
	Month_2 int64
	Year_2  int64
}

func (q *Queries) MostReactionsReceived(ctx context.Context, arg MostReactionsReceivedParams) ([]Member, error) {
	rows, err := q.db.QueryContext(ctx, mostReactionsReceived,
		arg.Month,
		arg.Year,
		arg.Month_2,
		arg.Year_2,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Member
	for rows.Next() {
		var i Member
		if err := rows.Scan(
			&i.ID,
			&i.SlackUid,
			&i.ReceivedLikes,
			&i.ReceivedDislikes,
			&i.ReceivedReactions,
			&i.GivenLikes,
			&i.GivenDislikes,
			&i.GivenReactions,
			&i.Month,
			&i.Year,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGivenDislikes = `-- name: UpdateGivenDislikes :exec
UPDATE members
SET given_dislikes = ?
WHERE id = ?
`

type UpdateGivenDislikesParams struct {
	GivenDislikes int64
	ID            int64
}

func (q *Queries) UpdateGivenDislikes(ctx context.Context, arg UpdateGivenDislikesParams) error {
	_, err := q.db.ExecContext(ctx, updateGivenDislikes, arg.GivenDislikes, arg.ID)
	return err
}

const updateGivenLikes = `-- name: UpdateGivenLikes :exec
UPDATE members
SET given_likes = ?
WHERE id = ?
`

type UpdateGivenLikesParams struct {
	GivenLikes int64
	ID         int64
}

func (q *Queries) UpdateGivenLikes(ctx context.Context, arg UpdateGivenLikesParams) error {
	_, err := q.db.ExecContext(ctx, updateGivenLikes, arg.GivenLikes, arg.ID)
	return err
}

const updateGivenReactions = `-- name: UpdateGivenReactions :exec
UPDATE members
SET given_reactions = ?
WHERE id = ?
`

type UpdateGivenReactionsParams struct {
	GivenReactions int64
	ID             int64
}

func (q *Queries) UpdateGivenReactions(ctx context.Context, arg UpdateGivenReactionsParams) error {
	_, err := q.db.ExecContext(ctx, updateGivenReactions, arg.GivenReactions, arg.ID)
	return err
}

const updateMember = `-- name: UpdateMember :exec
UPDATE members
SET received_likes = ?,
received_dislikes = ?,
received_reactions = ?,
given_likes = ?,
given_dislikes = ?,
given_reactions = ?
WHERE id = ?
`

type UpdateMemberParams struct {
	ReceivedLikes     int64
	ReceivedDislikes  int64
	ReceivedReactions int64
	GivenLikes        int64
	GivenDislikes     int64
	GivenReactions    int64
	ID                int64
}

func (q *Queries) UpdateMember(ctx context.Context, arg UpdateMemberParams) error {
	_, err := q.db.ExecContext(ctx, updateMember,
		arg.ReceivedLikes,
		arg.ReceivedDislikes,
		arg.ReceivedReactions,
		arg.GivenLikes,
		arg.GivenDislikes,
		arg.GivenReactions,
		arg.ID,
	)
	return err
}

const updateReceivedDislikes = `-- name: UpdateReceivedDislikes :exec
UPDATE members
SET received_dislikes = ?
WHERE id = ?
`

type UpdateReceivedDislikesParams struct {
	ReceivedDislikes int64
	ID               int64
}

func (q *Queries) UpdateReceivedDislikes(ctx context.Context, arg UpdateReceivedDislikesParams) error {
	_, err := q.db.ExecContext(ctx, updateReceivedDislikes, arg.ReceivedDislikes, arg.ID)
	return err
}

const updateReceivedLikes = `-- name: UpdateReceivedLikes :exec
UPDATE members
SET received_likes = ?
WHERE id = ?
`

type UpdateReceivedLikesParams struct {
	ReceivedLikes int64
	ID            int64
}

func (q *Queries) UpdateReceivedLikes(ctx context.Context, arg UpdateReceivedLikesParams) error {
	_, err := q.db.ExecContext(ctx, updateReceivedLikes, arg.ReceivedLikes, arg.ID)
	return err
}

const updateReceivedReactions = `-- name: UpdateReceivedReactions :exec
UPDATE members
SET received_reactions = ?
WHERE id = ?
`

type UpdateReceivedReactionsParams struct {
	ReceivedReactions int64
	ID                int64
}

func (q *Queries) UpdateReceivedReactions(ctx context.Context, arg UpdateReceivedReactionsParams) error {
	_, err := q.db.ExecContext(ctx, updateReceivedReactions, arg.ReceivedReactions, arg.ID)
	return err
}
